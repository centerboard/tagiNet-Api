swagger: '2.0'
# You should specify common part of your endpoints in the following format:
#   <schemes>://<host><basepath>
schemes:
  - https # Remove if your API donsn't support HTTPS
host: www.taginet.com # Replace with your hostname. You can also specify port e.g. example.com:777
basePath: /rest/v1 # Replace with your basePath. Note: SHOULD begin with '/'.
info:
  description: |

    # Introduction

    This document specifies the webservices provided by tagiNet. This API is built using REST principles, which ensures predictable URLs that makes writing applications easy.

    The services are structured by the following categories:

      * __Configuration__ : Interface for the basic configuration of the schtagiNet instance
      * __Me__ : Interface for retrieving data specific to the user
      * __Fibu__ : Interface for FiBu

    # Query Parameters Details

    Most GET services support additional query parameters to sort, filter and paginate the list of results.

    ## Sorting

    The result of most GET services can be sorted by any of the corresponding object properties.

      * Sorting order is specified by the left to right order of the properties listed
      * Sorting direction defaults to ascending and can be changed to descending by using a minus sign (-) prefix on the requested field.

    _Example_ :

    `/rooms?sort=-capacity,token`

    Retrieves a list of rooms in descending order of capacity. Rooms with the same capacity are sorted by the token.

    ## Filtering

    The result of most GET services can be filtered by any of the corresponding object properties.

    A single filter uses the form:

    `property operator expression`

    In this syntax:

      * `property`: the name of the object property to filter on.
      * `operator` : defines the type of filter match to use. See the list of operators for more details.
      * `expression` : states the values to be included in or excluded from the results.

    ### Operators

    The operators must be URL-encoded in order to be included in URL query strings.

    All string operations are case insensitive.

    | Operator | URL Encoded Form | Description | Examples |
    | -------- | ----------- | -------- | -------- |
    | == | %3D%3D | Equals | Return rooms where the capacity is exactly 50 persons:</br>`/rooms?filter=capacity%3D%3D50`</br>Retun students where the last name is Meier:</br>`/persons/students?filter=lastName%3D%3DMeier` |
    | != | !%3D | Does not equal | Return rooms where the capacity is not 50 persons:</br>`/rooms?filter=capacity!%3D50`</br>Return students where the last name is not Meier:</br>`/persons/students?filter=lastName!%3DMeier` |
    | =~ | %3D~ | Equals | Retun students where the last name contains Meier:</br>`/persons/students?filter=lastName%3D~Meier` |
    | !~ | !~ | Does not equal | Return students where the last name does not conatin Meier:</br>`/persons/students?filter=lastName!~Meier` |
    | > | %3E | Greater than | Return rooms where the capacity is strictly greater than 50 persons:</br>`/rooms?filter=capacity%3E50` |
    | < | %3C | Less than | Return rooms where the capacity is strictly less than 50 persons:</br>`/rooms?filter=capacity%3C50` |
    | >= | %3E%3D | Greater than or equal to | Return rooms where the capacity is 50 persons or more:</br>`/rooms?filter=capacity%3E%3D50` |
    | < = | %3C%3D | Less than or equal to | Return rooms where the capacity is 50 persons or less:</br>`/rooms?filter=capacity%3C%3D50` |

    ### Expression

      * Characters such as & must be url-encoded in the usual way.
      * The semicolon and comma must be backslash escaped when they appear in an expression.

    ### Combining filters

    Filters can be combined using `OR` and `AND` boolean logic.

      * `OR`: The `OR` operator is defined using a comma `,`. It takes precedence over the `AND` operator.
      * `AND`: The `AND` operator is defined using a semi-colon `;`. It is preceded by the `OR` operator.

    _Examples_ :

    Return the rooms with capacity for 15 to 30 persons:
    `/rooms?filter=capacity%3C%3D15;capacity%3E%3D30`

    Return all students where the first name contains Hans, and the last name is Meier or Meyer:
    `/perons/students?filter=firstName%3D~Hans;lastName%3D%3DMeier,lastName%3D%3DMeyer`

    ## Pagination

    The result of most GET services can be paginated with the query parameters `per_page` and `page` to limit the number of datasets in the result.

      * `per_page` indicates how many results will be returned.
      * `page` is used to navigate through the pages, the first page is `1`

    If one of these two parameters is missing, or is not numeric, the unpaginated list of results will be returned.

    If the results are paginated, the response header will contain two additional entries:

      * `X-Total-Count` : indicates the total count of datasets for the GET service, with respect to filtering if the corresponding query parameter is set.
      * `Link` : provides links for the navigation through the pages. URLs for the next page (`rel="next"`) and the last page (`rel="last"`) are set if the requested page is not the last. URLs for the first page (`rel="first"`) and the previous page (`rel="previous"`) are set if the requested page is not the first.

    ## Specifiying the semester

    Some properties of some objects are semester-bound, for exmaple the courses of a student. The semester to be used for these properties can be specified by the request parameter `semid`.<br>
    The provided value has to be a valid `id` of a `semester` object or `all`.<br>
    If no semester is specified, or the provided value is not valid, the current active semester of the instance will be used.

  version: '1.0.0' # Your API version
  title: taginet.com # Replace with your API title
  termsOfService: 'http://www.schul-netz.com/api-policy.html'
  contact:
    name: Centerboard AG
    email: apiteam@centerboard.ch
    url: 'http://www.centerboard.ch'
  x-logo:
    url: 'https://centerboard.s3.amazonaws.com/CenterboardLogo.jpg'
    backgroundColor: '#FFFFFF'
produces:
  # List of mime types your API endpoins can return.
  # This is a global default. You can OVERWRITE it in each specific operation.
  # Remove the ones not used in your API
  - application/json
consumes:
  # List of mime types your API endpoins consumes.
  # This is a global default. You can OVERWRITE it in each specific operation.
  # Remove the ones not supported by your API
  - application/json
# A list of tags used by the specification with additional metadata.
# The order of the tags can be used to reflect on their order by the parsing tools.
tags:
  - name: Echo
    description: Example echo operations
  - name: User
    description: Operations about user
# Security scheme definitions that can be used across the specification.
securityDefinitions:
  o_auth: # security definition name (you can name it as you want)
    type: oauth2 # authorization type, one of: oauth2, basic, apiKey
    # the following options are specific to oauth2 type
    authorizationUrl: 'https://www.taginet.com/mandant/authorize'
    flow: implicit
    scopes:
      'read:users': read users info
      'write:users': modify or remove users
  basic_auth: # security definition name (you can name it as you want)
    type: basic

# Holds the relative paths to the individual endpoints. The path is appended to the
# basePath in order to construct the full URL. 
paths:
  '/users/{username}': # path parameter in curly braces
    # documentation for GET operation for this path
    
    # parameters list that are used with each operation for this path
    parameters:
      - name: pretty_print
        in: query # place where paramter is passed: path, header, query or body, formData
        description: Pretty print response
        # type of the paramter: string, number, integer, boolean, array
        type: boolean
    get:
      tags:
        - User
      
      # summary is up to 120 symbold but we recommend to be shortest as possible
      summary: Get user by user name
      
      # you can use GFM in operation description too: https://guides.github.com/features/mastering-markdown
      description: | 
        Some description of the operation. 
        You can use `markdown` here.
      
      # operationId should be unique across the whole specification
      operationId: getUserByName
      
      # list of parameters for the operation
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched'
          required: true
          type: string
        - name: with_email
          in: query
          description: Filter users without email
          type: boolean
      
      # security schemas applied to this operation
      security:
        - main_auth:
          - 'read:users' # for auth2 provide list of scopes here
        - api_key: []
        - basic_auth: []
      # overwriting default global produces
      produces:
        - application/json
      responses: # list of responses
        '200':
          description: Success
          schema: # response schema can be specified for each response
            $ref: '#/definitions/User'
          examples:
          # repsonse samples for each type operation produces
            application/json:
              username: user1
              email: user@example.com
        '403':
          description: Forbidden
        '404':
          description: User not found
    # documentation for PUT operation for this path
    put:
      tags:
        - User
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          # for body parameter you should specify request schema instead of type
          schema:
            $ref: '#/definitions/User'
      security:
        - main_auth:
          - 'write:users'
      responses:
        '200':
          description: OK
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
  
  '/echo':
    post:
      tags:
        - Echo
      summary: Echo test
      description: Receive the exact message you've sent
      operationId: echo
      parameters:
        - name: message
          in: body
          description: 'Echo payload'
          required: true
          schema:
            type: string
            example: 'Hello world!'
      security:
        - api_key: []
      responses:
        '200':
          description: 'OK'
          examples:
            'application/json': 'Hello world!'
          schema:
            type: string
          # docuemnt headers for this repsonse
          headers:
            X-Rate-Limit: # Header name
              type: integer # Header value type
              format: int32 # Header value format
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
# An object to hold data types that can be consumed and produced by operations.
# These data types can be primitives, arrays or models.
definitions:
  Email:
    description: User email address
    type: string
    format: email
    example: john.smith@example.com
  User:
    type: object
    properties:
      username:
        description: User supplied username
        type: string
        minLength: 4
        example: John78
      firstName:
        description: User first name
        type: string
        minLength: 1
        example: John
      lastName:
        description: User last name
        type: string
        minLength: 1
        example: Smith
      email:
        $ref: '#/definitions/Email'
