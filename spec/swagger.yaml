swagger: '2.0'
# You should specify common part of your endpoints in the following format:
#   <schemes>://<host><basepath>
schemes:
  - https # Remove if your API donsn't support HTTPS
host: www.taginet.com # Replace with your hostname. You can also specify port e.g. example.com:777
basePath: /rest/v1 # Replace with your basePath. Note: SHOULD begin with '/'.
info:
  description: |

    # Introduction

    This document specifies the webservices provided by tagiNet. This API is built using REST principles, which ensures predictable URLs that makes writing applications easy.

    The services are structured by the following categories:

      * __Configuration__ : Interface for the basic configuration of the tagiNet instance
      * __Me__ : Interface for retrieving data specific to the user
      * __General Accounting__ : Interface for general accounting

    # Query Parameters Details

    Most GET services support additional query parameters to sort, filter and paginate the list of results.

    ## Sorting

    The result of most GET services can be sorted by any of the corresponding object properties.

      * Sorting order is specified by the left to right order of the properties listed
      * Sorting direction defaults to ascending and can be changed to descending by using a minus sign (-) prefix on the requested field.

    _Example_ :

    `/rooms?sort=-capacity,token`

    Retrieves a list of rooms in descending order of capacity. Rooms with the same capacity are sorted by the token.

    ## Filtering

    The result of most GET services can be filtered by any of the corresponding object properties.

    A single filter uses the form:

    `property operator expression`

    In this syntax:

      * `property`: the name of the object property to filter on.
      * `operator` : defines the type of filter match to use. See the list of operators for more details.
      * `expression` : states the values to be included in or excluded from the results.

    ### Operators

    The operators must be URL-encoded in order to be included in URL query strings.

    All string operations are case insensitive.

    | Operator | URL Encoded Form | Description | Examples |
    | -------- | ----------- | -------- | -------- |
    | == | %3D%3D | Equals | Return rooms where the capacity is exactly 50 persons:</br>`/rooms?filter=capacity%3D%3D50`</br>Retun students where the last name is Meier:</br>`/persons/students?filter=lastName%3D%3DMeier` |
    | != | !%3D | Does not equal | Return rooms where the capacity is not 50 persons:</br>`/rooms?filter=capacity!%3D50`</br>Return students where the last name is not Meier:</br>`/persons/students?filter=lastName!%3DMeier` |
    | =~ | %3D~ | Equals | Retun students where the last name contains Meier:</br>`/persons/students?filter=lastName%3D~Meier` |
    | !~ | !~ | Does not equal | Return students where the last name does not conatin Meier:</br>`/persons/students?filter=lastName!~Meier` |
    | > | %3E | Greater than | Return rooms where the capacity is strictly greater than 50 persons:</br>`/rooms?filter=capacity%3E50` |
    | < | %3C | Less than | Return rooms where the capacity is strictly less than 50 persons:</br>`/rooms?filter=capacity%3C50` |
    | >= | %3E%3D | Greater than or equal to | Return rooms where the capacity is 50 persons or more:</br>`/rooms?filter=capacity%3E%3D50` |
    | < = | %3C%3D | Less than or equal to | Return rooms where the capacity is 50 persons or less:</br>`/rooms?filter=capacity%3C%3D50` |

    ### Expression

      * Characters such as & must be url-encoded in the usual way.
      * The semicolon and comma must be backslash escaped when they appear in an expression.

    ### Combining filters

    Filters can be combined using `OR` and `AND` boolean logic.

      * `OR`: The `OR` operator is defined using a comma `,`. It takes precedence over the `AND` operator.
      * `AND`: The `AND` operator is defined using a semi-colon `;`. It is preceded by the `OR` operator.

    _Examples_ :

    Return the rooms with capacity for 15 to 30 persons:
    `/rooms?filter=capacity%3C%3D15;capacity%3E%3D30`

    Return all students where the first name contains Hans, and the last name is Meier or Meyer:
    `/perons/students?filter=firstName%3D~Hans;lastName%3D%3DMeier,lastName%3D%3DMeyer`

    ## Pagination

    The result of most GET services can be paginated with the query parameters `per_page` and `page` to limit the number of datasets in the result.

      * `per_page` indicates how many results will be returned.
      * `page` is used to navigate through the pages, the first page is `1`

    If one of these two parameters is missing, or is not numeric, the unpaginated list of results will be returned.

    If the results are paginated, the response header will contain two additional entries:

      * `X-Total-Count` : indicates the total count of datasets for the GET service, with respect to filtering if the corresponding query parameter is set.
      * `Link` : provides links for the navigation through the pages. URLs for the next page (`rel="next"`) and the last page (`rel="last"`) are set if the requested page is not the last. URLs for the first page (`rel="first"`) and the previous page (`rel="previous"`) are set if the requested page is not the first.

  version: '1.0.0' # Your API version
  title: taginet.com # Replace with your API title
  termsOfService: 'http://www.schul-netz.com/api-policy.html'
  contact:
    name: Centerboard AG
    email: apiteam@centerboard.ch
    url: 'http://www.centerboard.ch'
  x-logo:
    url: 'https://centerboard.s3.amazonaws.com/CenterboardLogo.jpg'
    backgroundColor: '#FFFFFF'
produces:
  - application/json
consumes:
  - application/json
# A list of tags used by the specification with additional metadata.
# The order of the tags can be used to reflect on their order by the parsing tools.
tags:
  - name: Echo
    description: Example echo operations
  - name: Me
    description: Information about connected user
  - name: General Accounting
    description: Read operations for general accounting

# Security scheme definitions that can be used across the specification.
securityDefinitions:
  o_auth: # security definition name (you can name it as you want)
    type: oauth2 # authorization type, one of: oauth2, basic, apiKey
    # the following options are specific to oauth2 type
    authorizationUrl: 'https://www.taginet.com/mandant/authorize'
    flow: implicit
  basic_auth: # security definition name (you can name it as you want)
    type: basic
responses:
  response401:
    description: '401 - Unauthorized: no or wrong user credentials (Client-ID, username, userkey)'
    schema:
      $ref: '#/definitions/Error'
  response403:
    description: '403 - Forbidden: The client is not allowed to connect to that service'
    schema:
      $ref: '#/definitions/Error'
  response404:
    description: 404 - Ressource/Object not found
    schema:
      $ref: '#/definitions/Error'
  response429:
    description: '429 - Too Many Requests: Number of max requests reached. Try again later.'
    schema:
      $ref: '#/definitions/Error'
    headers:
      X-Rate-Limit-Limit:
        description: The number of allowed requests in the current period
        type: integer
      X-Rate-Limit-Remaining:
        description: The number of remaining requests in the current period
        type: integer
      X-Rate-Limit-Reset:
        description: The number of seconds left in the current period
        type: integer
  responseDefault:
    description: Unexpected error
    schema:
      $ref: '#/definitions/Error'
    headers:
      X-Rate-Limit-Limit:
        description: The number of allowed requests in the current period
        type: integer
      X-Rate-Limit-Remaining:
        description: The number of remaining requests in the current period
        type: integer
      X-Rate-Limit-Reset:
        description: The number of seconds left in the current period
        type: integer

# Holds the relative paths to the individual endpoints. The path is appended to the
# basePath in order to construct the full URL. 
paths:
  /me:
    get:
      summary: Returns personal student information
      operationId: meGet
      tags:
        - Me
      responses:
        '200':
          description: Personal User-Information
          schema:
            $ref: '#/definitions/Taginetuser'
          headers:
            X-Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              type: integer
            X-Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              type: integer
            X-Rate-Limit-Reset:
              description: The number of seconds left in the current period
              type: integer
          examples:
            application/json:
              id: 9
              lastName: MyLastName
              firstName: MyFirstName
              gender: male
              birthday: '1999-09-29'
              phone: 061 211 00 10
              mobile: 079 520 01 20
              email: First.Last@kita.ch
              emailPrivate: myPrivateMail@hotmail.com
        '401':
          $ref: '#/responses/response401'
        '403':
          $ref: '#/responses/response403'
        '404':
          $ref: '#/responses/response404'
        '429':
          $ref: '#/responses/response429'
        default:
          $ref: '#/responses/responseDefault'

  '/generalaccounting/balance/{year}':
    get:
      summary: Returns balance sheet
      operationId: balanceGet
      tags:
        - GeneralAccouting
      parameters:
        - name: year
          in: path
          description: accounting year
          required: true
          type: integer
      responses:
        '200':
          description: Balance Sheet returns array of accounts (asset and liability accounts)
          schema:
            type: array
            items:
              $ref: '#/definitions/Fibuaccount'
          headers:
            X-Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              type: integer
            X-Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              type: integer
            X-Rate-Limit-Reset:
              description: The number of seconds left in the current period
              type: integer
        '401':
          $ref: '#/responses/response401'
        '403':
          $ref: '#/responses/response403'
        '404':
          $ref: '#/responses/response404'
        '429':
          $ref: '#/responses/response429'
        default:
          $ref: '#/responses/responseDefault'

  '/generalaccounting/incomestatement/{year}':
    get:
      summary: Returns income statement  
      operationId: incomestatementGet
      tags:
        - GeneralAccouting
      parameters:
        - name: year
          in: path
          description: accounting year
          required: true
          type: integer
      responses:
        '200':
          description: income statement returns array of accounts (revenue and expenses)
          schema:
            type: array
            items:
              $ref: '#/definitions/Fibuaccount'
          headers:
            X-Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              type: integer
            X-Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              type: integer
            X-Rate-Limit-Reset:
              description: The number of seconds left in the current period
              type: integer
        '401':
          $ref: '#/responses/response401'
        '403':
          $ref: '#/responses/response403'
        '404':
          $ref: '#/responses/response404'
        '429':
          $ref: '#/responses/response429'
        default:
          $ref: '#/responses/responseDefault'

  '/echo':
    post:
      tags:
        - Testing
      summary: Echo test
      description: Receive the exact message you've sent
      operationId: echo
      parameters:
        - name: message
          in: body
          description: 'Echo payload'
          required: true
          schema:
            type: string
            example: 'Hello world!'
      security:
        - o_auth: []
        - basic_auth: []
      responses:
        '200':
          description: 'OK'
          examples:
            'application/json': 'Hello world!'
          schema:
            type: string
          headers:
            X-Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              type: integer
            X-Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              type: integer
            X-Rate-Limit-Reset:
              description: The number of seconds left in the current period
              type: integer        
        '401':
          $ref: '#/responses/response401'
        '403':
          $ref: '#/responses/response403'
        '404':
          $ref: '#/responses/response404'
        '429':
          $ref: '#/responses/response429'
        default:
          $ref: '#/responses/responseDefault'      

# An object to hold data types that can be consumed and produced by operations.
# These data types can be primitives, arrays or models.
definitions:
  Email:
    description: User email address
    type: string
    format: email
    example: john.smith@example.com

  Fibuaccount:
    description: Account information
    type: object
    properties:
      id:
        type: string
        description: hash of technical ID
      nr:
        type: string
        description: Account-number
      name:
        type: string
      accounttype:
        type: string
        enum:
          - asset
          - liability
          - revenue
          - expense
      sum:
        type: boolean
        default: false
        description: Ja, wenn eine Zwischensumme
      balance:
        type: number
        format: double
      balancePreviousYear:
        type: number
        format: double
      budget:
        type: number
        format: double

  Taginetuser:
    type: object
    required:
      - lastName
      - firstName
    properties:
      id:
        type: string
      idNr:
        type: string
      lastName:
        type: string
      firstName:
        type: string
      loginActive:
        type: boolean
        default: false
      gender:
        type: string
        enum:
          - male
          - female
      birthday:
        type: string
        format: date
      street:
        type: string
      addressLine2:
        type: string
        maxLength: 255
      postOfficeBox:
        type: string
        maxLength: 255
      zip:
        type: string
      city:
        type: string
      phone:
        type: string
        format: phone
      mobile:
        type: string
        format: phone
      email:
        $ref: '#/definitions/Email'
      emailPrivate:
        $ref: '#/definitions/Email'
  Error:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
        description: '<ul><li>1001: Technical error while calling the Web Service</li><li>1002: Error while parsing the JSON</li><li>1003: Invalid input</li><li>1004: Database Error while inserting</li><li>1005: Database Error because of duplicate entry</li><li>5001: Invalid offerId</li><li>5002: Inavlid course menu</li></ul>'
      message:
        type: string
      description:
        type: string

